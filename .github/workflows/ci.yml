name: CI

on: [push]

jobs:
  build:
    name: Build

    runs-on: ubuntu-latest

    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: '1.16'
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Fetch build tools
      run: |
        go get golang.org/x/lint/golint
        go get gotest.tools/gotestsum

    - name: Build
      run: go build -v ./...

    - name: Lint
      run: golint -set_exit_status ./...

    - name: Test
      run: |
        mkdir -p tmp/test-results
        gotestsum --junitfile tmp/test-results/gotestsum-report.xml ./...

    - name: Upload test results to BuildPulse for flaky test detection -- Inception! ðŸ¤¯
      if: '!cancelled()' # Run this step even when the tests fail. Skip if the workflow is cancelled.
      env:
        BUILDPULSE_ACCESS_KEY_ID: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID }}
        BUILDPULSE_SECRET_ACCESS_KEY: ${{ secrets.BUILDPULSE_SECRET_ACCESS_KEY }}
      run: |
        curl -fsSL https://github.com/buildpulse/test-reporter/releases/latest/download/test-reporter-linux-amd64 > ./buildpulse-test-reporter
        chmod +x ./buildpulse-test-reporter
        ./buildpulse-test-reporter submit tmp/test-results --account-id 68192324 --repository-id 280914963

  golangci-lint:
    name: Lint

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.37

  smoke-test:
    name: Smoke test

    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: '1.16'
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get version
      id: get_version
      run: |
        if [[ "$GITHUB_REF" =~ ^refs\/tags\/ ]]; then
          VERSION=${GITHUB_REF/refs\/tags\//}
        else
          VERSION=$GITHUB_SHA
        fi
        echo "Version: $VERSION"
        echo ::set-output name=version::${VERSION}

    - name: Build executable binaries
      run: ./script/build-for-release ${{ steps.get_version.outputs.version }}

    - name: Output version from binary
      run: ./bin/test-reporter-linux-amd64 --version

    - name: Verify binary can successfully package up test results and upload them to BuildPulse
      env:
        BUILDPULSE_ACCESS_KEY_ID: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID }}
        BUILDPULSE_SECRET_ACCESS_KEY: ${{ secrets.BUILDPULSE_SECRET_ACCESS_KEY }}
      run: |
        mkdir -p fake-test-results-dir
        touch fake-test-results-dir/report.xml
        ./bin/test-reporter-linux-amd64 submit fake-test-results-dir --account-id 68192324 --repository-id 280914963

    - name: Upload binaries as artifacts
      uses: actions/upload-artifact@v2
      with:
        name: bin
        path: bin/
        retention-days: 1

  create-release:
    name: Create draft release

    # If the push that triggered this is a tag that starts with "v" (e.g., v1.0.0)
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}

    needs: [build, golangci-lint, smoke-test]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v2

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{needs.smoke-test.outputs.version}}
        release_name: ${{needs.smoke-test.outputs.version}}
        body: "ðŸš€"
        draft: true
        prerelease: ${{ endsWith(github.ref, '-pre') }}

    - name: Upload linux binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: bin/test-reporter-linux-amd64
        asset_name: test-reporter-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload darwin binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: bin/test-reporter-darwin-amd64
        asset_name: test-reporter-darwin-amd64
        asset_content_type: application/octet-stream

    - name: Print release URL
      run: echo "${{ steps.create_release.outputs.html_url }}"
